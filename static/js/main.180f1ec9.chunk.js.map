{"version":3,"sources":["components/Home.js","components/Navbar.js","components/ListQuote.js","components/Mint.js","components/Purchase.js","components/App.js","serviceWorker.js","index.js"],"names":["Home","_useState","useState","_useState2","Object","slicedToArray","loadind","setLoading","_useState3","_useState4","quote","setQuote","_useState5","_useState6","trade","setTrade","_useState7","_useState8","account","setAccount","_loadWeb","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","window","ethereum","web3","Web3","enable","currentProvider","alert","stop","apply","this","arguments","_loadBlockchainData","_callee2","networkId","quoteData","contract","totalSupply","tradeData","trd","_loop","i","_context3","eth","getAccounts","then","res","catch","err","net","getId","sent","Quote","networks","Contract","abi","address","methods","call","Trade","cnt","_id","qt","td","amount","_context2","quotes","quoteList","utils","fromWei","price","toString","prevquote","concat","toConsumableArray","name","id","listed","forSell","delegateYield","buyQuote","event","_index","target","value","_price","etherAmount","toWei","send","from","on","confirmation","location","assign","error","useEffect","loadWeb3","loadBlockchainData","react_default","createElement","Fragment","Segment","basic","textAlign","Message","compact","Loader","active","inline","length","react_masonry_css_es5_default","breakpointCols","default","1100","700","500","className","columnClassName","map","item","index","key","Card","fluid","Content","Description","extra","Button","onClick","color","Navbar","Menu","secondary","MenuItem","react_router_dom","to","src","alt","width","position","ListQuote","props","open","setOpen","ipData","setIpData","message","setMessage","Modal","closeIcon","onClose","onOpen","trigger","Header","Form","Input","placeholder","onChange","_event$target","prevIpData","objectSpread","defineProperty","approve","once","listQuote","Mint","inp","setInp","setContract","_useState9","_useState10","_useState11","_useState12","setAddress","_useState13","_useState14","acc","response","qtm","balanceOf","tokenOfOwnerByIndex","console","log","Field","size","mint","reload","components_ListQuote","Purchase","search","slice","App","components_Navbar","react_router","path","component","exact","Boolean","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.180f1ec9.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Quote from '../abis/Quote.json';\r\nimport Trade from '../abis/Trade.json';\r\nimport Web3 from 'web3';\r\nimport { Button, Segment, Card, Loader, Message } from 'semantic-ui-react';\r\nimport Masonry from \"react-masonry-css\";\r\n\r\nfunction Home(){\r\n    const [loadind,setLoading] = useState(false);\r\n    const [quote,setQuote] = useState([]); \r\n    const [trade,setTrade] = useState({}); \r\n    const [account,setAccount] = useState('');\r\n    const breakpointColumnsObj = {\r\n      default: 4,\r\n      1100: 3,\r\n      700: 2,\r\n      500: 1\r\n      };\r\n\r\n    async function loadWeb3() {\r\n      if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum)\r\n        await window.ethereum.enable()\r\n      }\r\n      else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider)\r\n      }\r\n      else {\r\n        window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n      }\r\n    }\r\n\r\n    async function loadBlockchainData(){\r\n      const web3 = window.web3;\r\n      setLoading(true);\r\n      web3.eth.getAccounts()\r\n        .then(res=>{\r\n            setAccount(res[0]);\r\n        })\r\n        .catch(err=>{window.alert(\"please select your ethereum account\")})    \r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      const quoteData = Quote.networks[networkId];\r\n          if(quoteData) {\r\n            const contract = new web3.eth.Contract(Quote.abi, quoteData.address);\r\n\r\n            const totalSupply = await contract.methods.totalSupply().call();\r\n            \r\n            const tradeData = Trade.networks[networkId];\r\n            if(tradeData) {\r\n              const trd = new web3.eth.Contract(Trade.abi, tradeData.address);\r\n              setTrade(trd);\r\n              for (var i = totalSupply; i > 0; i--) {\r\n                let cnt = i-1;\r\n                let _id = cnt+1;\r\n                const qt = await contract.methods.quotes(cnt).call();\r\n                const td = await trd.methods.quoteList(_id).call();\r\n                let amount = web3.utils.fromWei(td.price.toString(),'Ether');\r\n                  setQuote(prevquote => {\r\n                    return [...prevquote, {name:qt,id:_id,price:amount,listed:td.forSell}];\r\n                  });   \r\n              }\r\n              setLoading(false);\r\n            }\r\n          } else {\r\n            window.alert('Smart contract not deployed to detected network.');\r\n            setLoading(false);\r\n          }   \r\n    } \r\n    \r\n      useEffect(() => {\r\n        loadWeb3();  \r\n        loadBlockchainData();\r\n      },[])\r\n\r\n      function buyQuote(event){\r\n        setLoading(true);\r\n        const _index = event.target.value;\r\n        const _id = quote[_index].id;\r\n        const _price = quote[_index].price;\r\n        const etherAmount = window.web3.utils.toWei(_price, 'Ether');\r\n        trade.methods.buyQuote(_id).send({value:etherAmount , from:account})\r\n        .on('confirmation', (confirmation) => {\r\n          window.location.assign(\"/quotefactory/#/mint\");\r\n          setLoading(false);\r\n        })\r\n        .on('error', (error) => {\r\n            window.alert(\"Transaction failed. Try again!\");\r\n            setLoading(false);\r\n        });\r\n      }\r\n\r\n    return(\r\n        <>\r\n        <Segment basic textAlign=\"center\">\r\n         <Message compact>\r\n         This project runs on Ropsten Test Network.\r\n         </Message>\r\n        </Segment>\r\n        {loadind?<Loader active inline='centered' />:\r\n        <Segment basic textAlign=\"center\">\r\n        {(quote.length===0)&&<p>No quotes yet!</p>}\r\n          <Masonry\r\n          breakpointCols={breakpointColumnsObj}\r\n          className=\"my-masonry-grid\"\r\n          columnClassName=\"my-masonry-grid_column\">\r\n          \r\n            {quote.map((item, index) => {\r\n            return (\r\n              <div className=\"note\" key={index}>\r\n                <Card fluid>\r\n                  <Card.Content>\r\n                    <Card.Description>\r\n                      <div className = \"wrap\">\r\n                      <h1> “ {item.name} ” </h1>\r\n                      <p> token Id : {item.id} </p>\r\n                      </div> \r\n                    </Card.Description>\r\n                  </Card.Content>\r\n                  {(item.listed)&&(\r\n                    <Card.Content extra>\r\n                    <Button onClick={buyQuote} \r\n                    value={index}\r\n                    color=\"red\" fluid> Buy @ {item.price} ETH </Button>\r\n                    </Card.Content>\r\n                  )}    \r\n                </Card> \r\n              </div>           \r\n            );\r\n            })}\r\n        </Masonry>    \r\n        </Segment>\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport { Menu, MenuItem} from \"semantic-ui-react\";\r\n\r\nfunction Navbar(){\r\n  return(\r\n    <header>\r\n      <Menu secondary>\r\n      <MenuItem>\r\n        <div className=\"inline\">\r\n        <NavLink to=\"/\"><img src=\"./images/favicon.svg\" alt=\"quote\" width=\"30\" /></NavLink>\r\n        </div>\r\n        <div className=\"inline\">\r\n        <NavLink to=\"/\"><h1>uote Factory</h1></NavLink>\r\n        </div>\r\n        </MenuItem>\r\n        <MenuItem position=\"right\"> \r\n        <NavLink to=\"/mint\"><img src=\"./images/writer.svg\" alt=\"quote\" width=\"30\" /></NavLink>\r\n        </MenuItem>\r\n      </Menu>  \r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Button, Modal, Form, Message } from \"semantic-ui-react\";\r\n\r\nfunction ListQuote(props){\r\n  const [open, setOpen] = useState(false);\r\n  const [ipData, setIpData] = useState({price : \"\" });\r\n  const [loadind,setLoading] = useState(false);\r\n  const [message,setMessage] = useState(false);\r\n\r\n function handleChange(event) {\r\n  const { name, value } = event.target;\r\n\r\n  setIpData(prevIpData => {\r\n    return {\r\n      ...prevIpData,\r\n      [name]: value\r\n    };\r\n  });\r\n  }   \r\n\r\n  function update(){\r\n    setLoading(true);\r\n\r\n    let etherAmount;\r\n    etherAmount = ipData.price.toString();\r\n    etherAmount = window.web3.utils.toWei(etherAmount, 'Ether');\r\n\r\n    props.quote.methods.approve(props.address,props.id).send({from:props.account})\r\n    .once('confirmation',((confirmation)=>{\r\n        props.trade.methods.listQuote(props.id, etherAmount).send({from:props.account})\r\n        .once('confirmation',(confirmation)=>{\r\n            setMessage(true);\r\n            setLoading(false);\r\n        })\r\n        .on('error',(error)=>{\r\n            window.alert(\"something went wrong. please try again.\");\r\n            setOpen(false);\r\n            setLoading(false);\r\n        });\r\n    }))\r\n    .on('error',(error)=>{\r\n        window.alert(\"something went wrong. please try again.\");\r\n        setLoading(false);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      closeIcon\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={<Button color=\"grey\" fluid>\r\n                List for Sale</Button>}\r\n    >\r\n      <Modal.Header>List Quote For Sale!!!</Modal.Header>\r\n      <Modal.Content>\r\n      {loadind?<p>loading...please wait...It may take 5-10 minutes...</p>\r\n      :message?<Message>\r\n                  <Message.Header>Quote successfully listed for sell</Message.Header>\r\n                  <p>\r\n                    Your Quote Purchase Link : \r\n                    <NavLink to={\"/purchase?id=\".concat(props.id)}>\"https://unblocktechie.github.io/quotefactory/#/purchase?id={props.id}\"</NavLink>\r\n                  </p>\r\n              </Message> \r\n      :<Modal.Description>\r\n        <Form>\r\n        <Form.Input \r\n            placeholder='Add price in ETH'\r\n            name='price'\r\n            value={ipData.price}\r\n            onChange={handleChange} /> \r\n        <Button onClick={update} color='red' fluid>\r\n          List Quote\r\n        </Button>       \r\n        </Form>\r\n        </Modal.Description>\r\n        }\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ListQuote;","import React, {useState, useEffect} from 'react';\r\nimport { Input, Button, Segment, Form, Card } from 'semantic-ui-react';\r\nimport Quote from '../abis/Quote.json';\r\nimport Trade from '../abis/Trade.json';\r\nimport Web3 from 'web3';\r\nimport ListQuote from \"./ListQuote\";\r\nimport Masonry from \"react-masonry-css\";\r\n\r\nfunction Mint(){\r\n    const [loadind,setLoading] = useState(false);\r\n    const [inp, setInp] = useState(\"\");\r\n    const [account,setAccount] = useState('');\r\n    const [contract,setContract] = useState({});\r\n    const [trade,setTrade] = useState({});\r\n    const [address,setAddress] = useState();\r\n    const [quote,setQuote] = useState([]);\r\n    const breakpointColumnsObj = {\r\n      default: 4,\r\n      1100: 3,\r\n      700: 2,\r\n      500: 1\r\n      };\r\n\r\n    function loadBlockchainData(){\r\n        const web3 = window.web3;\r\n\r\n        web3.eth.getAccounts()\r\n        .then(res=>{\r\n            const acc = res[0];\r\n            setAccount(res[0]);\r\n\r\n            web3.eth.net.getId().then((response)=>{\r\n                const quoteData = Quote.networks[response];\r\n                if(quoteData) {\r\n                  const qtm = new web3.eth.Contract(Quote.abi, quoteData.address);\r\n                  setContract(qtm);  \r\n\r\n                    qtm.methods.balanceOf(acc).call()\r\n                    .then(res=>{\r\n                        let count = res.toString()-1;\r\n                        for (var i = count; i >= 0; i--) {\r\n                           qtm.methods.tokenOfOwnerByIndex(acc,i).call()\r\n                           .then(response=>{\r\n                            let _id = response.toString();   \r\n                            let cnt = _id-1;   \r\n                            qtm.methods.quotes(cnt).call()\r\n                            .then(res=>{\r\n                                setQuote(prevquote => {\r\n                                    return [...prevquote, {name:res,id:_id}];\r\n                                });\r\n                            })\r\n                            .catch(err=>{console.log(err)});\r\n                           })\r\n                           .catch(err=>{console.log(err)});\r\n                        }\r\n                    })\r\n                    .catch(err=>{console.log(err)});\r\n\r\n                } else {\r\n                  window.alert('Quote contract not deployed to detected network.');\r\n                }\r\n\r\n                //trade contract\r\n\r\n                const tradeData = Trade.networks[response];\r\n                if(tradeData) {\r\n                const trd = new web3.eth.Contract(Trade.abi, tradeData.address);\r\n                setTrade(trd);\r\n                setAddress(tradeData.address);\r\n                } else {\r\n                window.alert('Trade contract not deployed to detected network.');\r\n                }\r\n\r\n              }).catch((err)=>{\r\n                window.alert(\"something went wrong, try again\");\r\n            });\r\n        })\r\n        .catch(err=>{console.log(err)});\r\n        \r\n      }\r\n      \r\n      async function loadWeb3() {\r\n        if (window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n        else {\r\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n        }\r\n      }\r\n    \r\n      useEffect(() => {\r\n        loadWeb3();  \r\n        loadBlockchainData();\r\n      },[])\r\n\r\n    function handleChange(event){\r\n        setInp(event.target.value);\r\n    }\r\n\r\n    function mintQuote(){\r\n        setLoading(true);\r\n        contract.methods.mint(inp).send({ from: account })\r\n        .on('confirmation', (confirmation) => {\r\n            window.location.reload();\r\n        })\r\n        .on('error', (error) => {\r\n            window.alert(\"Quote already exist. Please choose another one\");\r\n            setLoading(false);\r\n        });\r\n    }\r\n    \r\n    return(\r\n      <>\r\n        <div className=\"mint\"> \r\n         <Segment basic textAlign=\"center\">\r\n            <Form>\r\n            <Form.Field>\r\n            <Input placeholder=\" Add Quote... \" onChange={handleChange} size=\"massive\" fluid />\r\n            </Form.Field>\r\n            <Form.Field>\r\n            {loadind?<p>Mint in progress...</p>:\r\n            <Button color=\"red\" size=\"big\" fluid onClick={mintQuote} >Mint</Button>\r\n            }\r\n            </Form.Field>\r\n            </Form>\r\n         </Segment>\r\n         </div>\r\n         <Segment basic textAlign=\"center\">\r\n        {(quote.length===0)&&<p>No quotes loaded yet!</p>}\r\n        <Masonry\r\n          breakpointCols={breakpointColumnsObj}\r\n          className=\"my-masonry-grid\"\r\n          columnClassName=\"my-masonry-grid_column\">\r\n            {quote.map((item, index) => {\r\n            return (\r\n              <div className=\"note\" key={index}>\r\n                <Card fluid>\r\n                  <Card.Content>\r\n                    <Card.Description>\r\n                      <div className = \"wrap\">\r\n                      <h1> “ {item.name} ” </h1>\r\n                      <p> token Id : {item.id} </p>\r\n                      </div> \r\n                    </Card.Description>\r\n                  </Card.Content>\r\n                    <Card.Content extra>\r\n                    <ListQuote id={item.id} trade={trade}\r\n                     address={address} quote={contract} account={account} />\r\n                    </Card.Content>\r\n                </Card> \r\n              </div>\r\n            );\r\n            })}\r\n        </Masonry>    \r\n        </Segment>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default Mint;\r\n","import React, {useState, useEffect} from 'react';\r\nimport Quote from '../abis/Quote.json';\r\nimport Trade from '../abis/Trade.json';\r\nimport Web3 from 'web3';\r\nimport { Button, Card, Segment, Loader } from 'semantic-ui-react';\r\n\r\nfunction Purchase(props){\r\n  const id = (props.location.search).slice(4);\r\n  const [loadind,setLoading] = useState(false);\r\n  const [quote,setQuote] = useState({}); \r\n  const [trade,setTrade] = useState({}); \r\n  const [account,setAccount] = useState('');\r\n\r\n    async function loadWeb3() {\r\n      if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum)\r\n        await window.ethereum.enable()\r\n      }\r\n      else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider)\r\n      }\r\n      else {\r\n        window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n      }\r\n    }\r\n\r\n    async function loadBlockchainData(){\r\n      const web3 = window.web3;\r\n      setLoading(true);\r\n      web3.eth.getAccounts()\r\n        .then(res=>{\r\n            setAccount(res[0]);\r\n        })\r\n        .catch(err=>{window.alert(\"please select your ethereum account\")})    \r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      const quoteData = Quote.networks[networkId];\r\n          if(quoteData) {\r\n            const contract = new web3.eth.Contract(Quote.abi, quoteData.address);\r\n            const tradeData = Trade.networks[networkId];\r\n            if(tradeData) {\r\n              const trd = new web3.eth.Contract(Trade.abi, tradeData.address);\r\n              setTrade(trd);\r\n                const cnt = id-1;\r\n                const qt = await contract.methods.quotes(cnt).call();\r\n                const td = await trd.methods.quoteList(id).call();\r\n                let amount = web3.utils.fromWei(td.price.toString(),'Ether');\r\n                setQuote( {name:qt, price:amount, listed:td.forSell});\r\n            setLoading(false);\r\n            }\r\n          } else {\r\n            window.alert('Smart contract not deployed to detected network.');\r\n            setLoading(false);\r\n          }   \r\n    } \r\n    \r\n      useEffect(() => {\r\n        loadWeb3();  \r\n        loadBlockchainData();\r\n      },[])\r\n\r\n      function buyQuote(){\r\n        setLoading(true);\r\n        const _id = id;\r\n        const _price = quote.price;\r\n        const etherAmount = window.web3.utils.toWei(_price, 'Ether');\r\n        trade.methods.buyQuote(_id).send({value:etherAmount , from:account})\r\n        .on('confirmation', (confirmation) => {\r\n          window.location.assign(\"/quotefactory/#/mint\");\r\n          setLoading(false);\r\n        })\r\n        .on('error', (error) => {\r\n            window.alert(\"Transaction failed. Try again!\");\r\n            setLoading(false);\r\n        });\r\n      }\r\n\r\n  return(\r\n    \r\n    <div className=\"mint\"> \r\n    {loadind?<Loader active inline='centered' />:\r\n    <Segment basic textAlign=\"center\">\r\n    <div className=\"note\">\r\n      <Card fluid>\r\n        <Card.Content>\r\n          <Card.Description>\r\n            <div className = \"wrap\">\r\n              <h1> “ {quote.name} ” </h1>\r\n              <p> token Id : {id} </p>\r\n            </div> \r\n          </Card.Description>\r\n        </Card.Content>\r\n        {(quote.listed)?(\r\n                    <Card.Content extra>\r\n                    <Button onClick={buyQuote} \r\n                    color=\"red\" fluid> Buy @ {quote.price} ETH </Button>\r\n                    </Card.Content>\r\n                    ):<Card.Content extra>\r\n                    <Button \r\n                    color=\"grey\" fluid> Not for Sell </Button>\r\n                    </Card.Content>}  \r\n      </Card> \r\n    </div>\r\n    </Segment>\r\n    }\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Purchase;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './Home';\r\nimport Navbar from './Navbar';\r\nimport Mint from './Mint';\r\nimport Purchase from './Purchase';\r\n\r\nfunction App(){\r\n\r\n  return(\r\n    <>\r\n    <Navbar />\r\n    <div className=\"main\">\r\n    <Switch>\r\n        <Route path=\"/\" component={Home} exact />\r\n        <Route path=\"/mint\" component={Mint} exact />\r\n        <Route path=\"/purchase\" component={Purchase} />\r\n        <Route component={Home} />\r\n    </Switch>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './components/App';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<HashRouter>\r\n                <App />\r\n                </HashRouter>, \r\n                document.getElementById('root'));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}